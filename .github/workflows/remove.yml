name: Remove action@github.com commits

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Target branch to clean'
        required: true
        default: 'main'
      author_email:
        description: 'Email to remove (author or committer)'
        required: true
        default: 'action@github.com'
      apply:
        description: '是否实际替换远端分支（true 会强推），默认 false（dry-run）'
        required: true
        default: 'false'

permissions:
  contents: write

jobs:
  remove-commits:
    runs-on: ubuntu-latest
    env:
      BRANCH: ${{ github.event.inputs.branch }}
      TARGET_EMAIL: ${{ github.event.inputs.author_email }}
      APPLY: ${{ github.event.inputs.apply }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Ensure on target branch (create if detached)
        run: |
          set -e
          git fetch origin "$BRANCH" --depth=1 || true
          if git rev-parse --abbrev-ref HEAD | grep -q '^HEAD$'; then
            git checkout -B "$BRANCH" origin/"$BRANCH" || git checkout -B "$BRANCH"
          else
            git checkout "$BRANCH" 2>/dev/null || git checkout -B "$BRANCH" origin/"$BRANCH" || git checkout -B "$BRANCH"
          fi
          git status --porcelain || true

      - name: Create backup branch (safe copy)
        run: |
          set -e
          ts=$(date -u +%Y%m%dT%H%M%SZ)
          backup_branch="backup/remove-commits-${BRANCH}-${ts}"
          git branch -f "$backup_branch" HEAD
          git push origin "$backup_branch"
          echo "Created backup branch: $backup_branch"

      - name: Run filter to skip commits by the email (local rewrite)
        run: |
          set -e
          echo "Target branch: ${BRANCH}"
          echo "Removing commits authored/committed by: ${TARGET_EMAIL}"

          # 确保在目标分支上
          git checkout "${BRANCH}"

          # 导出变量供 filter-branch 使用
          export TARGET_EMAIL="${TARGET_EMAIL}"

          # 使用 git filter-branch 在指定分支上跳过匹配 author/committer email 的提交
          # 说明：
          # - 使用 --force 覆盖临时 refs
          # - 使用 --commit-filter 并引用环境变量 TARGET_EMAIL（避免复杂的引号嵌套）
          # - 限定为 refs/heads/${BRANCH}，避免影响其他分支
          git filter-branch --force --commit-filter '
if [ "$GIT_COMMITTER_EMAIL" = "$TARGET_EMAIL" ] || [ "$GIT_AUTHOR_EMAIL" = "$TARGET_EMAIL" ]; then
  skip_commit "$@"
else
  git commit-tree "$@"
fi
' -- refs/heads/"${BRANCH}"

          echo "Filter complete."

      - name: Show resulting history (top 20 commits)
        run: |
          echo "---- new history (top 20) ----"
          git --no-pager log --pretty=format:'%h %ad %an <%ae> %s' --date=short -n 20
          echo "------------------------------"

      - name: Dry-run push to preview branch (default)
        if: env.APPLY != 'true'
        run: |
          set -e
          preview_branch="${BRANCH}-filtered-preview"
          git push --force origin HEAD:refs/heads/"${preview_branch}"
          echo "Dry-run complete. Preview pushed to branch: ${preview_branch}"
          echo "If OK, re-run this workflow with input `apply=true` to actually overwrite ${BRANCH}."

      - name: Apply: force-push cleaned history to target branch
        if: env.APPLY == 'true'
        run: |
          set -e
          echo "!!! APPLY MODE: will force-push cleaned history to origin/${BRANCH} !!!"
          git push --force --no-verify origin "HEAD:refs/heads/${BRANCH}"
          echo "Force-pushed cleaned history to origin/${BRANCH}"
